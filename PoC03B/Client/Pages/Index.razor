@page "/"

<PageTitle>Index</PageTitle>



@for(int rowId = 1; rowId <= MaxRowId; rowId++)
{
    <div class="mud-grid mud-grid-spacing-xs-3 mud-grid-justify-xs-flex-start align-end">
        @for(int itemId = 1; itemId <= 12; itemId++)
        {
            <MudItem xs="1" Class=@($"dropzone @dropClass")
                ondragover="event.preventDefault();"
                ondragstart="event.dataTransfer.setData('', event.target.id);"
                @ondrop="HandleDrop"
                @ondragenter="HandleDragEnter"
                @ondragleave="HandleDragLeave">
            </MudItem>
        }
    </div>
}

@code {
    int MaxRowId { get; set; } = 1;
    string dropClass = "";

    
    
    //[CascadingParameter] JobsContainer Container { get; set; }
    //[Parameter] public JobStatuses ListStatus { get; set; }
    //[Parameter] public JobStatuses[] AllowedStatuses { get; set; }

    //List<JobModel> Jobs = new List<JobModel>();

    private void HandleDragEnter()
    {
        //if (ListStatus == Container.Payload.Status) return;

        //if (AllowedStatuses != null && !AllowedStatuses.Contains(Container.Payload.Status))
        //{
        //    dropClass = "no-drop";
        //}
        //else
        //{
        //    dropClass = "can-drop";
        //}
    }

    private void HandleDragLeave()
    {
        //dropClass = "";
    }

      private async Task HandleDrop()
    {
        //dropClass = "";

        //if (AllowedStatuses != null && !AllowedStatuses.Contains(Container.Payload.Status)) return;

        //await Container.UpdateJobAsync(ListStatus);
    }
}