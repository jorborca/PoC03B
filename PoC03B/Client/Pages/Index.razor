@page "/"

<PageTitle>Index</PageTitle>

@inject ISnackbar Snackbar;

@for(int rowId = 1; rowId <= FormDesignerData.Rows; rowId++)
{
    <div class="mud-grid mud-grid-spacing-xs-0 mud-grid-justify-xs-flex-start">
        <Virtualize Items="GetFormComponentsByRow(rowId)" Context="formComponent">
            <MudItem xs="@formComponent.Xs" Class="dropzone"
                ondragover="event.preventDefault();"
                ondragstart="event.dataTransfer.setData('', event.target.id);"
                @ondrop="() => OnDrop(formComponent.Id)">
                
                @if(formComponent.TypeName == null)
                {
                    <text>@formComponent.RowId|@formComponent.ColId</text>
                }
                else
                {
                    <DynamicComponent Type="@formComponent.ComponentType" Parameters="@formComponent.Parameters"></DynamicComponent>
                }
            </MudItem>
        </Virtualize>
    </div>
}

@*@foreach (rowId = 1; rowId <= FormDesignerData.Rows; rowId++)
{
    <div class="mud-grid mud-grid-spacing-xs-0 mud-grid-justify-xs-flex-start"
        ondragover="event.preventDefault();"
        ondragstart="event.dataTransfer.setData('', event.target.id);">
        @for (colId = 1; colId <= 12; colId++)
        {
            <div class="mud-grid-item mud-grid-item-xs-1 dropzone"
                dropzone="moveZone"
                @key=@colId
                ondragover="event.preventDefault();"
                ondragstart="event.dataTransfer.setData('', event.target.id);"
                @ondrop="() => OnDrop(colId.ToString())">
                <text>@rowId|@colId</text>
            </div>

            @if (CheckFormComponentByRowAndCol(rowId, colId))
            {
                <MudItem xs="@(GetFormComponentByRowAndCol(rowId, colId).Xs)" Class="@($"dropzone @dropClass")">
                <div 
                    class="mud-grid-item mud-grid-item-xs-1 dropzone @dropClass"
                    ondragover="event.preventDefault();"
                    ondragstart="event.dataTransfer.setData('', event.target.id);"
                    @ondragenter="HandleDragEnter"
                    @ondragleave="HandleDragLeave"
                    @ondrop="(() => HandleDrop(rowId, colId))">
                    
                </div>
            }
            else
            {
            }
        }
    </div>
}*@

@code {
    [CascadingParameter(Name = "FormDesignerData")] protected FormDesignerModel FormDesignerData { get; set; }

    List<FormComponentModel> GetFormComponentsByRow(int rowId) => FormDesignerData.Items.Where(x => x.RowId == rowId).ToList();

    string dropClass = "";

    private void OnDragEnter(Guid id)
    {

        //if (AllowedStatuses != null && !AllowedStatuses.Contains(Container.Payload.Status))
        //{
        //    dropClass = "no-drop";
        //}
        //else
        //{
        //    dropClass = "can-drop";
        //}

    }

    private void OnDragOver()
    {

    }

    private void OnDragLeave()
    {
        //dropClass = "";
    }

    private void OnDrop(Guid id)
    {
        var targetComponent = FormDesignerData.Items.Single(x => x.Id == id);

        targetComponent.TypeName = FormDesignerData.DragTypeName;
        targetComponent.ComponentType = Type.GetType($"{FormDesignerData.DragTypeName}");

        FormDesignerData.DragTypeName = string.Empty;
    }
}